const esbuild = require('esbuild');
const { sassPlugin } = require('esbuild-sass-plugin');
const fs = require('fs-extra');
const path = require('path');
const { PurgeCSS } = require('purgecss');
const gaze = require('gaze'); // –ó–∞–º–µ–Ω—è–µ–º chokidar –Ω–∞ gaze

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –≤ style.css
async function updateThemeVersion() {
    const stylePath = path.join(process.cwd(), 'style.css');
    if (await fs.pathExists(stylePath)) {
        let content = await fs.readFile(stylePath, 'utf8');
        const buildNumber = Math.floor(Date.now() / 1000); // –ò—Å–ø–æ–ª—å–∑—É–µ–º timestamp

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –≤ style.css
        content = content.replace(
            /Version: .*$/m,
            `Version: ${process.env.npm_package_version}.${buildNumber}`
        );

        await fs.writeFile(stylePath, content);
        console.log('‚úÖ –í–µ—Ä—Å–∏—è —Ç–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
    }
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
    srcDir: './assets',
    outDir: './public',
    entryPoints: {
        js: './assets/js/main.js',
        css: './assets/css/main.scss'
    }
};

// –û—á–∏—Å—Ç–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
async function setupDirectory() {
    await fs.emptyDir(config.outDir);
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ public –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');

    const imagesDir = path.join(config.srcDir, 'images');
    const publicImagesDir = path.join(config.outDir, 'images');

    if (await fs.pathExists(imagesDir)) {
        await fs.copy(imagesDir, publicImagesDir);
        console.log('üñºÔ∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è PurgeCSS
async function purgeAndTransformCSS(css) {
    try {
        const purgeCSSInstance = new PurgeCSS();
        const purgeCSSResult = await purgeCSSInstance.purge({
            content: [
                './**/*.php',
                './assets/js/**/*.js'
            ],
            css: [{
                raw: css,
                extension: 'scss'
            }],
            safelist: {
                standard: [
                    /^wp-/,
                    /^has-/,
                    /^is-/,
                    /^align/,
                    /^theme-/
                ],
                deep: [/editor-styles-wrapper$/],
                greedy: [/^wp-block-/]
            },
            defaultExtractor: content => {
                return content.match(/[A-Za-z0-9-_/:]*[A-Za-z0-9-_/]+/g) || [];
            }
        });

        return purgeCSSResult[0]?.css || css;
    } catch (error) {
        console.error('PurgeCSS Error:', error);
        return css; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π CSS –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    }
}

// –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è esbuild
const baseConfig = {
    bundle: true,
    minify: process.env.NODE_ENV === 'production',
    sourcemap: process.env.NODE_ENV !== 'production',
    loader: {
        '.png': 'file',
        '.jpg': 'file',
        '.jpeg': 'file',
        '.gif': 'file',
        '.svg': 'file',
        '.woff': 'file',
        '.woff2': 'file',
        '.eot': 'file',
        '.ttf': 'file'
    },
    assetNames: 'assets/[name]-[hash]',
    plugins: [
        sassPlugin({
            async transform(source) {
                return await purgeAndTransformCSS(source);
            }
        })
    ]
};

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ PHP —Ñ–∞–π–ª–æ–≤
async function fullRebuild() {
    console.log('üîÑ PHP —Ñ–∞–π–ª –∏–∑–º–µ–Ω–µ–Ω, –∑–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏...');

    try {
        // –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º CSS
        await esbuild.build({
            ...baseConfig,
            entryPoints: [config.entryPoints.css],
            outdir: path.join(config.outDir, 'css'),
            logLevel: 'info'
        });

        console.log('‚úÖ –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ CSS –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–µ:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∫–∏
async function build({ watch = false } = {}) {
    try {
        await setupDirectory();

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é —Ç–æ–ª—å–∫–æ –ø—Ä–∏ production —Å–±–æ—Ä–∫–µ
        if (process.env.NODE_ENV === 'production') {
            await updateThemeVersion();
        }

        const commonConfig = {
            ...baseConfig,
            logLevel: 'info',
            metafile: true
        };

        if (watch) {
            // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è JS
            const jsContext = await esbuild.context({
                ...commonConfig,
                entryPoints: [config.entryPoints.js],
                outdir: path.join(config.outDir, 'js')
            });

            // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è CSS
            const cssContext = await esbuild.context({
                ...commonConfig,
                entryPoints: [config.entryPoints.css],
                outdir: path.join(config.outDir, 'css')
            });

            // –ó–∞–ø—É—Å–∫–∞–µ–º watch —Ä–µ–∂–∏–º –¥–ª—è JS –∏ CSS
            await Promise.all([
                jsContext.watch(),
                cssContext.watch()
            ]);

            console.log('üëÄ Watching for changes in JS and CSS files...');

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∑–∞ PHP —Ñ–∞–π–ª–∞–º–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º gaze
            const phpPattern = './**/*.php';
            let gazeWatcher = null;

            // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
            function startPhpWatcher() {
                gaze(phpPattern, { debounceDelay: 300, interval: 300 }, function (err, watcher) {
                    if (err) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ gaze:', err);
                        return;
                    }

                    gazeWatcher = this;
                    console.log('‚úÖ PHP watcher initialized and ready');

                    // –°–æ–±—ã—Ç–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞
                    this.on('all', (event, filepath) => {
                        console.log(`üìÑ PHP —Ñ–∞–π–ª ${event}: ${filepath}`);
                        fullRebuild();
                    });

                    // –°–æ–±—ã—Ç–∏–µ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
                    this.on('added', filepath => {
                        console.log(`‚ûï –ù–æ–≤—ã–π PHP —Ñ–∞–π–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω: ${filepath}`);
                    });

                    // –°–æ–±—ã—Ç–∏–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤
                    this.on('deleted', filepath => {
                        console.log(`‚ùå PHP —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: ${filepath}`);
                    });
                });
            }

            // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ PHP —Ñ–∞–π–ª–∞–º–∏
            startPhpWatcher();
            console.log('üëÄ Watching for changes in PHP files...');

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            const cleanup = async () => {
                await Promise.all([
                    jsContext.dispose(),
                    cssContext.dispose()
                ]);

                // –ó–∞–∫—Ä—ã–≤–∞–µ–º gaze watcher
                if (gazeWatcher) {
                    gazeWatcher.close();
                }

                console.log('üëã Cleaned up and exiting');
                process.exit(0);
            };

            process.on('SIGINT', cleanup);
            process.on('SIGTERM', cleanup);

        } else {
            // –û–±—ã—á–Ω–∞—è —Å–±–æ—Ä–∫–∞ –±–µ–∑ watch —Ä–µ–∂–∏–º–∞
            await Promise.all([
                esbuild.build({
                    ...commonConfig,
                    entryPoints: [config.entryPoints.js],
                    outdir: path.join(config.outDir, 'js')
                }),
                esbuild.build({
                    ...commonConfig,
                    entryPoints: [config.entryPoints.css],
                    outdir: path.join(config.outDir, 'css')
                })
            ]);

            console.log('‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∫–∏
const args = process.argv.slice(2);
const watchMode = args.includes('--watch');
build({ watch: watchMode }).catch(error => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
});